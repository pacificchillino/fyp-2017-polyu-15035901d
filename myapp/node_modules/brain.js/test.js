// import { FeedForward, layer } from './src/index';
// const { input, lstm, target, feedForward } = layer;
//
// const net = new FeedForward({
//   inputLayer: () => input({ width: 2 }),
//   hiddenLayers: [
//     (input) => feedForward({ width: 3 }, input),
//     (input) => feedForward({ width: 1 }, input),
//   ],
//   outputLayer: input => target({ width: 1 }, input)
// });
//
// net.train([
//   { input: [0, 0], output: [0] },
//   { input: [0, 1], output: [1] },
//   { input: [1, 0], output: [1] },
//   { input: [1, 1], output: [0] }
// ], {
//   iterations: 1000
// });
// console.log(net.run([0, 0])); // [0]
// console.log(net.run([0, 1])); // [1]
// console.log(net.run([1, 0])); // [1]
// console.log(net.run([1, 1])); // [0]


import Recurrent from './src/recurrent.js';
import { input, recurrent, output } from './src/layer';
import mse2d from './src/utilities/mse-2d';

const net = new Recurrent({
  inputLayer: () => input({ width: 1 }),
  hiddenLayers: [
    (input, recurrentInput) => recurrent({ height: 3 }, input, recurrentInput)
  ],
  outputLayer: (input) => output({ width: 1 }, input)
});


net.initialize();
let error = null;
for (let i = 0; i < 300; i++) {
  error = 0;
  net.runInput([0, 0, 0]);
  net.calculateDeltas([0, 0, 0]);
  net.adjustWeights();
  error += mse2d(net._outputLayer.errors);

  net.runInput([0, 1, 1]);
  net.calculateDeltas([0, 1, 1]);
  net.adjustWeights();
  error += mse2d(net._outputLayer.errors);

  net.runInput([1, 0, 1]);
  net.calculateDeltas([1, 0, 1]);
  net.adjustWeights();
  error += mse2d(net._outputLayer.errors);

  net.runInput([1, 1, 0]);
  net.calculateDeltas([1, 1, 0]);
  net.adjustWeights();
  error += mse2d(net._outputLayer.errors);

  console.log(
    error / 4,
    net.predict([0, 0]).toString(),
    net.predict([0, 1]).toString(),
    net.predict([1, 0]).toString(),
    net.predict([1, 1]).toString()
  );
}
console.log('done');
console.log(
  error / 4,
  net.predict([0, 0]).toString(),
  net.predict([0, 1]).toString(),
  net.predict([1, 0]).toString(),
  net.predict([1, 1]).toString()
);


// import Recurrent from './src/recurrent.js';
// import { input, recurrent, output } from './src/layer';
// import mse2d from "./src/utilities/mse-2d";
// const net = new Recurrent({
//   inputLayer: () => input({ width: 1 }),
//   hiddenLayers: [
//     (input, recurrentInput) =>  recurrent({ height: 3 }, input, recurrentInput)
//   ],
//   outputLayer: (input) => output({ width: 1 }, input)
// });
// net.initialize();
// let error = null;
// for (let i = 0; i < 300; i++) {
//   error = 0;
//   net.runInput([0, 1]);
//   net.calculateDeltas([0, 1]);
//   net.adjustWeights();
//   error += mse2d(net._outputLayer.errors);
//
//   net.runInput([1, 0]);
//   net.calculateDeltas([1, 0]);
//   net.adjustWeights();
//   error += mse2d(net._outputLayer.errors);
//
//   console.log(
//     error / 2,
//     net.predict([0]).toString(),
//     net.predict([1]).toString()
//   );
// }
// console.log('done');
// console.log(
//   error / 2,
//   net.predict([0]).toString(),
//   net.predict([1]).toString(),
// );