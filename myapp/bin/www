#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('myapp1:server');
var http = require('http');
var server = http.createServer(app);
var io = require('socket.io')(server);
var config = require('../config');
var func = require('../func');
var MongoClient = require('mongodb').MongoClient;
var cron = require('node-cron');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

//-------------------------------------------------------------------------------------------------------------------------------

/**
 * Includes
 */

var data_obtain = require("../data_obtain");
var data_regression_tram = require("../data_regression_tram");

/**
 * Socket.io connection --> global.io
 */

io.on('connection', function (socket) {
	global.io = io;
});

/**
 * MongoDB connection --> global.db
 */
MongoClient.connect(func.getMongoURL(), function(err, mydb) {
	if (err) throw err;
	global.db = mydb;
	//Init
	data_obtain.init(false);
	console.log("DB connection successful");
});

/**
 * Crons
 */

//Cuckoo reminder
cron.schedule('0 * * * *', function(){
	func.msg("Cuckoo!", config.debug_color.hour);
});

//Every 5 
cron.schedule('*/5 * * * *', function(){
	var msg2 = {
		dayType: global.dayType,
		dayOfWeek: global.dayOfWeek,
		dateStr: global.dateStr,
		isWeekday: global.isWeekday,
		exceptionHourStart: global.exceptionHourStart,
		exceptionHourEnd: global.exceptionHourEnd,
	};
	func.msg2("The time now is " + func.getHMOfDay(), JSON.stringify(msg2), config.debug_color.hour);
});

/**
 * Weather
 */
cron.schedule(config.cron_time_weather_obtain, function(){
	data_obtain.obtainWeather();
});

/**
 * Trams
 */

//Date turnover
cron.schedule(config.cron_time_date_turnover, function(){
	data_obtain.init(true);
});

//Obtain data for isTerminus: false
cron.schedule(config.cron_time_tram_get_eta, function(){
	data_obtain.obtainTramETA(false);
});

//Obtain data for isTerminus: true
cron.schedule(config.cron_time_tram_get_eta2, function(){
	data_obtain.obtainTramETA(true);
});

//Obtain E.M. message
cron.schedule(config.cron_time_tram_get_em, function(){
	data_obtain.obtainTramEM();
});

//Update regression
cron.schedule(config.cron_time_tram_update_regression, function(){
	data_regression_tram.updateRegressions();
});

//Reminders
cron.schedule(config.cron_time_tram_start, function(){
	func.msg("Tram : Starts data recording", config.debug_color.hour);
});
cron.schedule(config.cron_time_tram_end, function(){
	func.msg("Tram : Ends recordings of new tram entries", config.debug_color.hour);
});
cron.schedule(config.cron_time_tram_cutoff, function(){
	func.msg("Tram : Cutoffs all tram recordings", config.debug_color.hour);
});
cron.schedule(config.cron_time_weather_start, function(){
	func.msg("Weather : Starts data recording", config.debug_color.hour);
});
cron.schedule(config.cron_time_weather_end, function(){
	func.msg("Weather : Ends data recording", config.debug_color.hour);
});